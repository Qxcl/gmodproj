Project {
    projectName     "gmodproj"
    projectAuthor   "novacbn"

    buildDirectory "./build"

    entryPoints {
        {"gmodproj/core/Application", "gmodproj"}
    }

    Scripts {
        buildDistributable (buildMode="production") ->
            import hashSHA256 from dependency "gmodproj/lib/digests"

            -- Configure the environment for building
            isProduction = buildMode\lower() == "production"
            mkdir "./dist" unless isDir "./dist"

            -- Configure the build process depending on the Operating System
            BINARY_LUVI, BINARY_LUVIT, BINARY_UPX, BINARY_GMODPROJ, BINARY_DIST = switch SYSTEM_OS_TYPE
                when "Linux"
                    "./bin/luvi", "./bin/luvit", "./bin/upx", "./bin/gmodproj", "./dist/gmodproj.#{SYSTEM_OS_ARCH}.#{SYSTEM_OS_TYPE}"
                when "Windows"
                    "bin\\luvi.exe", "bin\\luvit.exe", "bin\\upx.exe", "bin\\gmodproj.exe", "dist\\gmodproj.#{SYSTEM_OS_ARCH}.#{SYSTEM_OS_TYPE}.exe"

            -- Produce a project build of gmodproj
            success, status, stdout = execFormat BINARY_GMODPROJ, "build", isProduction and "production"
            return 1, "Project build failed: (#{status})\n#{stdout}" unless success

            -- Create a distributable executable with the local Luvit binaries
            success, status, stdout = execFormat BINARY_LUVI, "./build", "-m", "main.lua", "-o", BINARY_DIST, BINARY_LUVIT
            return 2, "Binary creation failed: (#{status})\n#{stdout}" unless success

            -- Compress the binary if possible
            if isProduction and exists(BINARY_UPX) and isFile(BINARY_UPX)
                success, status, stdout = execFormat BINARY_UPX, BINARY_GMODPROJ
                return 3, "Binary compression failed: (#{status})\n#{stdout}" unless success

            -- Create hash files and perform cleanup
            write "./dist/gmodproj.lua", read("./build/gmodproj.lua")
            write "./dist/gmodproj.lua.sha256", hashSHA256(read("./dist/gmodproj.lua")
            write BINARY_DIST..".sha256", hashSHA256(read(BINARY_DIST))
            remove "./build/gmodproj.lua"

            -- Log success!
            return 0, "Succesfully built gmodproj in #{isProduction and 'production' or 'development'} mode!"
    }
}